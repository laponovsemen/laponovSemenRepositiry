/* Take the following IPv4 address: 128.32.10.1

This address has 4 octets where each octet is a single byte (or 8 bits).

1st octet 128 has the binary representation: 10000000
2nd octet 32 has the binary representation: 00100000
3rd octet 10 has the binary representation: 00001010
4th octet 1 has the binary representation: 00000001
So 128.32.10.1 == 10000000.00100000.00001010.00000001

Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: 2149583361

Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.

Examples
2149583361 ==> "128.32.10.1"
32         ==> "0.0.0.32"
0          ==> "0.0.0.0" */

----------------------------------------------------------------------------------------------------------------------------------------------------


def converter_to_binary(int):
    res = ""
    result = ["","","",""]
    for i in range(32):
        if int >= 2 ** (31 - i):
            res += "1"
            int -= 2 ** (31 - i)
        else:
            res += "0"
    for i in range(8):
        result[0] += res[i]
        result[1] += res[8 + i]
        result[2] += res[16 + i]
        result[3] += res[24 + i]
    return result
        
def converter_from_binary_to_int(str):
    result = 0
    for i in range(len(str)):
        if str[i] == "1":
            result += 2 ** (len(str) - 1 - i )
    return result
    
def int32_to_ip(int32):
    # your code here
    arr = converter_to_binary(int32)
    for i in range(4):
        arr[i] = str(converter_from_binary_to_int(arr[i]))
    return ".".join(arr)
    
    
    
print(int32_to_ip(4294967294))
