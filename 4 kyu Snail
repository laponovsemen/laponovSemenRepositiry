/* Snail Sort
Given an n x n array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.

array = [[1,2,3],
         [4,5,6],
         [7,8,9]]
snail(array) #=> [1,2,3,6,9,8,7,4,5]
For better understanding, please follow the numbers of the next array consecutively:

array = [[1,2,3],
         [8,9,4],
         [7,6,5]]
snail(array) #=> [1,2,3,4,5,6,7,8,9]
This image will illustrate things more clearly:


NOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.

NOTE 2: The 0x0 (empty matrix) is represented as en empty array inside an array [[]].
*/

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

snail = function(array) {
  // enjoy
  var rightBorder = 0; 
  var leftBorder = 0;
  var bottomBorder = 0;
  var topBorder = 0;
  let resultArray = [];
  for(let k = 0; k < array[0].length / 2; k++){
    for(let i = leftBorder; i < array.length  - rightBorder; i++){   
      resultArray.push(array[topBorder][i]);
      
    }
    topBorder++; 
    for(let i = topBorder; i < array.length  - bottomBorder; i++){
      resultArray.push(array[i][array.length - 1 - rightBorder]);
      
    }
    rightBorder++;
    for(let i = array.length - 1 - rightBorder; i >leftBorder - 1; i--){
      resultArray.push(array[array.length - 1 - bottomBorder][i]);
    }
    bottomBorder++;
    for(let i = array.length - 1 - bottomBorder; i > topBorder - 1; i--){
      resultArray.push(array[i][leftBorder]);
    }
    leftBorder++;
  }
  return resultArray;
}
console.log(snail([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]));
